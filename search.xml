<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Ajax]]></title>
    <url>%2FAjax.html</url>
    <content type="text"><![CDATA[AjaxAjax（Asynchronous JavaScript And XML）是一种异步技术，表示异步的JavaScript和XML。其技术实现是在&lt;script>&lt;\/script&gt;标签中。 异步Get/Post请求 Get请求前端向后端发送Get请求将请求是将数据放置url地址后方，地址与数据使用?隔离,数据与数据使用&amp;隔离。 Post请求前端向后端发送Post请求是将请求数据放置在请求报文中，再将报文发送服务器。 注意Ajax需要注意的是虽然Get请求会将数据添加到url地址后面，但是因为是异步，它是在不刷新页面本身的时候进行的异步，也就是说它只是局部的显示更改，而非重新加载新网页。所以在使用Ajax时虽然是使用的get请求可是在地址框中地址是不变的，如果要看到可以使用抓包工具自行抓取观看。 Ajax的Get请求12ajaxObject.open(&quot;GET&quot;,&quot;Login.ashx&quot;,true);ajaxObject.send(); ajaxObject是Ajax创建的对象,GET是使用GET方式传输,Login.ashx是ASP.net中的一般处理对象:用于处理前端所传递的数据;true：是是否使用异步，true：使用异步，false：使用同步。 Ajax的Post请求12ajaxObject.open(&quot;post&quot;,&quot;Login.ashx&quot;,true);ajaxObject.send(); 其区别不太大，只是将get参数值改为了post。 JavaScript的Ajax封装123456789101112131415161718192021222324252627// 封装的Ajax function MyAjaxMethod(httpMethod, url, callback) &#123; // xhr是异步对象 var xhr; // 判断浏览器是否支持XMLHttpRequest if (XMLHttpRequest) &#123; // IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码 xhr = new XMLHttpRequest(); &#125; else &#123; // IE6, IE5 浏览器执行代码 xhr = new ActiveXobject(&quot;Microsoft.XMLHTTP&quot;); &#125; // 规定请求的类型、URL 以及是否异步处理请求。 xhr.open(httpMethod, url, true); // 将请求发送到服务器。 xhr.send(); // 当xhr对象使用的时异步时需使用onreadystatechange事件中的就绪z状态时执行的函数。 xhr.onreadystatechange = function () &#123; // readystate存有 XMLHttpRequest 的状态，status时返回的状态码 if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123; // 将返回的数据使用传入的方法进行执行 callback(xhr.responseText); &#125; &#125; &#125; JQuery使用Ajax1234567891011121314151617181920&lt;script src=&quot;jquery-3.3.0.js&quot;&gt;&lt;/script&gt;&lt;script&gt; $(function () &#123; // 按钮单击 $(&quot;#btnLogin&quot;).click(function () &#123; // 获取文本框值 var txtUser = $(&quot;#txtUser&quot;).val(); var txtPwd = $(&quot;#txtPwd&quot;).val(); // get方式，(请求地址,请求数据,返回数据的处理方法) $.get(&quot;ProcessLogin.ashx&quot;, &#123; Name: txtUser, Pwd: txtPwd &#125;, function (data) &#123; if (data == &quot;OK&quot;) &#123; window.location.href = &quot;Main.aspx&quot;; &#125; else &#123; alert(&quot;用户密码错误&quot;); &#125; &#125;) &#125;) &#125;)&lt;/script&gt;]]></content>
      <categories>
        <category>异步</category>
      </categories>
      <tags>
        <tag>Ajax异步操作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于Hexo+Github搭建博客]]></title>
    <url>%2Fbolg.html</url>
    <content type="text"><![CDATA[Hexo与Github什么是Hexo？Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 什么是Github？gitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。 环境配置 安装Node.js 官网下载:https://nodejs.org/en/ 更换成国内镜像源: [edit ~/.npmrc] registry=https://registry.npm.taobao.org [end] 更换国内镜像源参照:https://blog.csdn.net/github_38313789/article/details/80625820 安装Hexo npm install -g hexo-cli 一般现在安装Node.js时就自安装了Hexo 安装Git 下载地址: https://git-scm.com/ https://github.com/waylau/git-for-win https://npm.taobao.org/mirrors/git-for-windows/ 使用教程:https://blog.csdn.net/qq_36150631/article/details/81038485 常用Hexo命令 初始化目录:hexo init [folder] 新建文章:hexo new [layout] \或hexo n [layout] \ 新建草稿:hexo new draft \ 将草稿发布为正式文章:hexo publish \ 生成静态文件:hexo generate或hexo g 监听文件变化:hexo g –watch或hexo g -w 部署:hexo deploy或hexo d 先生成后部署:hexo d -g 启动本地服务器(服务器会监听文件变化并自动更新):hexo server或hexo s 启动调试:hexo s –debug 预览草稿:hexo s –draft 清除缓存:hexo clean 使用NexT主题配置Hexo使用Hexo搭建，先配置Hexo，在合适的位置打开cmd,进行初始化。 hexo init [folder] 下载主题在初始化的目录中通过Git下载主题 git clone https://github.com/iissnan/hexo-theme-next themes/next 启动主题编辑根目录的_config.yml: theme: next 设置语言编辑根目录的_config.yml: language: zh-Hans 启动本地查看是否生效 hexo cleanhexo ghexo s 打开本地浏览器访问:http://localhost:4000/Ctrl+C结束 创建GitHub Pages注册GitHub账号,创建新的库，库是公开的，库名是:\.github.io 设置ssh访问Github仓库 生成ssh key:ssh-keygen -t rsa -C “youremail@example.com“ -C是大写的 在GitHub上的用户设置的SSH keys点击在右侧add SSH key点击，在下面的title写有意义的头名，在key里填写在C-&gt;用户-&gt;.ssh文件中的id_rsa.pub打开这个文件将内容复制粘贴到key里面 安装git-deploy插件 npm install hexo-deployer-git –save 配置git-deploy插件编辑根目录的_config.yml: deploy: type: git repo: git@github.com:\/ \.github.io.git branch: master 部署到Github hexo d -g 配置Hexo设置头像编辑主题中的_config.yml avatar:\ 添加标签页面 新建页面: hexo new page tags 设置页面(编辑source/tags/index.md) -–type: “tags”comments: false-– 修改菜单(编辑主题中的_config.yml文件) menu:tags: /tags 添加分类页面 新建页面: hexo new page categories 设置页面(编辑source/tags/index.md) -–type: “categories”comments: false-– 修改菜单(编辑主题中的_config.yml文件) menu:tags: /categories 添加about页面 新建页面: hexo new page about 设置页面（编辑 source/about/index.md 修改菜单(编辑主题中的_config.yml文件) menu:about: /about 首页文章摘要在文章中适当位置插入 \，该位置之前的部分即为摘要，会显示在首页中。 显示文章更新时间编辑主题中的_config.yml文件: # Post meta display settings post_meta: updated_at: true 文章更新时间默认使用文件的修改时间，如果想自己指定，可以在文章的 Front-matter （即文件最上方以 — 分隔的区域）中加入： updated: \ 其中，\ 的格式示例为 2017-04-11 16:29:50。 设置代码高亮编辑主题中的_config.yml文件: highlight_theme: normal 添加 Creative Commons 署名协议编辑主题中的_config.yml文件: # Declare license on posts# Creative Commons 4.0 International License.# http://creativecommons.org/# Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zerocreative_commons: by\post_copyright: enable: true license: CC BY 4.0 license_url: http://creativecommons.org/licenses/by/4.0/ 添加评论系统使用 Disqus 作为评论系统。需要注意的是，Disqus 已经被墙，所以不翻墙是看不到的，只能相信大家都是带着梯子来的了。。。编辑主题中的_config.yml文件: # Disqusdisqus: enable: true shortname: \ count: true 也可以使用来必力代替 Disqus，编辑主题中的_config.yml文件: livere_uid: 侧边栏社交链接编辑主题中的_config.yml文件:123456789101112131415# Social linkssocial: GitHub: https://github.com/your-user-name Twitter: https://twitter.com/your-user-name 微博: http://weibo.com/your-user-name 豆瓣: http://douban.com/people/your-user-name 知乎: http://www.zhihu.com/people/your-user-name# Social Iconssocial_icons: enable: true # Icon Mappings GitHub: github Twitter: twitter 微博: weibo 开启打赏功能编辑主题中的_config.yml文件: reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！wechatpay: /path/to/wechat-reward-imagealipay: /path/to/alipay-reward-image 腾讯公益404页面编辑主题中的_config.yml文件:123456789101112131415161718&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8;&quot;/&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;all&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://qzone.qq.com/gy/404/style/404style.css&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;script type=&quot;text/plain&quot; src=&quot;http://www.qq.com/404/search_children.js&quot; charset=&quot;utf-8&quot; homePageUrl=&quot;/&quot; homePageName=&quot;回到我的主页&quot;&gt; &lt;/script&gt; &lt;script src=&quot;https://qzone.qq.com/gy/404/data.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://qzone.qq.com/gy/404/page.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 更改站点建立时间编辑主题中的_config.yml文件: since: \ 阅读次数统计使用不蒜子统计，编辑主题中的_config.yml文件:1234567891011121314151617# Show PV/UV of the website/page with busuanzi.# Get more information on http://ibruce.info/2015/04/04/busuanzi/busuanzi_count: # count values only if the other configs are false enable: true # custom uv span for the whole site site_uv: true site_uv_header: &lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt; site_uv_footer: # custom pv span for the whole site site_pv: true site_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt; site_pv_footer: # custom pv span for one page only page_pv: true page_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt; page_pv_footer: 集成搜索服务使用本地搜索，按照以下步骤设置: 安装hexo-generator-searchdb插件: npm install hexo-generator-searchdb –save 编辑跟目录中的_config.yml文件: 12345search: path: search.xml field: post format: html limit: 10000 编辑主题中的_config.yml文件: 123# Local searchlocal_search: enable: true 添加sitemap插件安装 hexo-generator-sitemap 插件： npm install hexo-generator-sitemap –save 配置（编辑 _config.yml）:12sitemap: path: sitemap.xml 添加蜘蛛协议 robots.txt新建 source/robots.txt：12345678910111213141516User-agent: *Disallow: /CNAMEDisallow: /READMEAllow: /Allow: /about/Allow: /archives/Allow: /categories/Allow: /tags/Allow: /css/Allow: /images/Allow: /js/Allow: /lib/Sitemap: &lt;your-domain-name&gt;/sitemap.xml 设置RSS安装 hexo-generator-feed 插件： npm install hexo-generator-feed –save配置（编辑 _config.yml）:123456feed: type: atom path: atom.xml limit: 20 # Maximum number of posts in the feed (Use 0 or false to show all posts) hub: content: 添加脚注/上标/下标/缩写支持由于 Hexo 默认使用的 Markdown renderer 是 marked，它不支持脚注/上标/下标/缩写，我们可以使用 Markdown-it 替代 marked：12npm un hexo-renderer-marked --savenpm i hexo-renderer-markdown-it --save 配置（编辑 _config.yml）:12345678910111213141516171819202122# Markdown-it config## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wikimarkdown: render: html: true xhtmlOut: false breaks: false linkify: true typographer: false quotes: &apos;“”‘’&apos; plugins: - markdown-it-abbr - markdown-it-footnote - markdown-it-ins - markdown-it-sub - markdown-it-sup anchors: level: 2 collisionSuffix: &apos;v&apos; permalink: false permalinkClass: header-anchor permalinkSymbol: ¶ 参考链接 如何使用 Hexo 和 GitHub Pages 搭建这个博客|uchuhimo’s blog 最简便的方法搭建Hexo-Github博客-基于Next主题]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>基于Hexo+Github搭建博客</tag>
      </tags>
  </entry>
</search>
